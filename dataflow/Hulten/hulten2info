#!/usr/bin/gawk -f

# Images in hulten are 4510 wide x 6590 high

BEGIN{

  Page    = ARGV[2] # page number in book
  Imgfile = "p" sprintf("%03d", ARGV[2]) ".tiff"
  Img     = 0       # image number counter
  pad     = 10      # padding pixels to add to image
  
  # Check arguments
  if (ARGC == 0) exit
  else if (ARGV[1] == "split") {
    if (ARGC != 3) exit

    # extract the image from the PDF
    export(Page, Imgfile)
    # View the main image
    # system("display -resize x1000 tiff/" Imgfile " &")

    # 1. first pass, slicing off the top 450 page header,
    #   and a bit of the bottom, scanning by rows
    chunkup(4510, 6000, 0, 450, Imgfile, 2, 100, 1)
    # returns an array Chunk with n chunks: starting row and length of rows

    # 1b. for each horizontal chunk, divide text from illustrations
    for (i in Chunk["len"]) { 
      # odd page
      # <--- 3050 text ---><--- 1460 ill --->    sum=4510 
      if ((Page/2) != int(Page/2)) {
        # text
        W[++Img] = 3050    ;  H[Img] = Chunk["len"][i] + 2*pad
        X[Img]   = 0       ;  Y[Img] = Chunk["beg"][i] -   pad
        N[Img]   =            Page "-" sprintf("%02d",Img) "-T.tiff"
        # illustration
        W[++Img] = 1460    ;  H[Img] = Chunk["len"][i] + 2*pad
        X[Img]   = 3050    ;  Y[Img] = Chunk["beg"][i] -   pad
        N[Img]   =            Page "-" sprintf("%02d",Img) "-I.tiff"
      }
      else {
        # even page
        W[++Img] = 3020    ;  H[Img] = Chunk["len"][i] + 2*pad
        X[Img]   = 1490    ;  Y[Img] = Chunk["beg"][i] -   pad
        N[Img]   =            Page "-" Img "-T.tiff"
        # illustration
        W[++Img] = 1490    ;  H[Img] = Chunk["len"][i] + 2*pad
        X[Img]   = 0       ;  Y[Img] = Chunk["beg"][i] -   pad
        N[Img]   =            Page "-" sprintf("%02d",Img) "-I.tiff"
      }
    }
  }

  # 2. second pass, slicing off the maps
  for (i in W) {
    if (N[i] ~ /-T\./) {
      # already padded in (1) above
      chunkup(W[i], H[i], X[i], Y[i], Imgfile, 2, 80, 1)
      # assume 2 parts: maps and all else
      W[++Img] = W[i]      ;  H[Img] = Chunk["len"][1] + 2*pad
      X[Img]   = X[i]      ;  Y[Img] = Chunk["beg"][1] -   pad
      N[Img]   =              Page "-" sprintf("%02d",Img) "-m.tiff"
      # the text, may be 1 or more bits
      for (j in Chunk["len"]) maxj = j 
      W[++Img] = W[i]      ;  H[Img] = Chunk["end"][maxj] - Chunk["beg"][2] \
                                + 2*pad
      X[Img]   = X[i]      ;  Y[Img] = Chunk["beg"][2] -   pad
      N[Img]   =              Page "-" sprintf("%02d",Img) "-t.tiff"
    }
  }

  # third pass, slicing up the maps, vertically
  for (i in W) {
    if (N[i] ~ /-m\./) {
      chunkup(W[i], H[i], X[i], Y[i], Imgfile, 1, 300, 1)
      # assume 2: map 1 ; add no padding
      W[++Img] = Chunk["len"][1] ;  H[Img]   = H[i]
      X[Img]   = Chunk["beg"][1] ;  Y[Img]   = Y[i]
      N[Img]   =                    Page "-" sprintf("%02d",Img) "-1.tiff"
      # map 2
      W[++Img] = Chunk["len"][2] ;  H[Img]   = H[i]
      X[Img]   = Chunk["beg"][2] ;  Y[Img]   = Y[i]
      N[Img]   =                    Page "-" sprintf("%02d",Img) "-2.tiff"
    }
  }

  # printf "%4s  %4s  %4s  %4s  %s\n", "W", "H", "X", "Y", "name"
  for (i in W) {
    # view in print:
    # printf "%4d  %4d  %4d  %4d  %s\n", W[i], H[i], X[i], Y[i], N[i]
    # view in display
    # system("display -crop " W[i] "x" H[i] "+" X[i] "+" Y[i] \
    #        " -resize 500x500 -title " N[i] " tiff/p" Page ".tiff &")
    # make subfiles
    if (N[i] ~ /-[It12]\./)
      system("convert tiff/p" Page ".tiff -crop " \
             W[i] "x" H[i] "+" X[i] "+" Y[i] " tiff/" N[i] )
  }
  
  exit 1
  
}

function export(page, imgfile,     paper){
  paper = paperpage(page)
  print "Extracting book page " page " (pdf page " paper ")" > "/dev/stderr"
  system("cd tiff; pdfimages -tiff -f " paper " -l " paper \
         " ../hulten.pdf tmp ; mv tmp-000.tif " imgfile " ; rm -f tmp*")
}


function chunkup(w, h, x, y, infile, orient, dim, thres                   \
                 , cmd, c, bn, j, i, bot, pad, top, hgt, dimt) {
  
  # orient=2: scan for horiz gaps; orient=1: scan for vert gaps
  if      (orient == 2) dimt =     "x" dim
  else if (orient == 1) dimt = dim "x"
  
  # resize to ~1/60 size, this blurs the content, but maintains the major
  # (but not inter-line) spaces.
  cmd = "convert tiff/" infile " -crop " w "x" h "+" x "+" y \
    " -resize " dimt " -threshold 97% -depth 1 txt:-"
  # if (dim==80) # print cmd
  #   system("display -crop " w "x" h "+" x "+" y                         \
  #        " -resize " dim "x" dim " -threshold 97% -depth 1 tiff/" infile " & ") 
  while ((cmd | getline) > 0 ) {
    gsub(/:/,"",$1)
    # only lines that have coordinates
    if ($1 ~ ",") {
      split($1,c,",")  # coordinates are xpix, ypix
      if ($3 == "#000000") bn[c[orient]]++
    }
  }

  # n > thres  -> row is black ; test on p112
  bn[-1] = 0 # coordinates numbered from 0, line beyond top is white
  j = 0
  for (i = 0; i < dim; i++) {
    if (!bn[i]) bn[i] = 0
    # black
    if (bn[i] > thres) {
      # change to black
      if (bn[i-1] <= thres) {
        # new band
        j++
        top[j] = i
      }
    }
    else {
      # change to white
      if (bn[i-1] > thres) {
        # new band
        bot[j] = i
      }
    }
  }  

  # end black band if last line was black 
  if (!bot[j]) bot[j] = dim

  if (orient == 1) {
    h = w # if scanning vertically, the longest dim is width
    y = x #                         and we add the x, not y
  }

  if (isarray(Chunk)) delete Chunk  # clear array if exists
  # for each band
  for (i in top) {
    Chunk["len"][i] =  int(    (bot[i]- top[i]) * (h / dim))   # + pad + pad
    Chunk["beg"][i] =  int(y + (top[i]          * (h / dim)))  # - pad
    Chunk["end"][i] =  int(y + (bot[i]          * (h / dim)))  # - pad
  }
}

function paperpage(page    , p1, p2, i) {

  # page structure of scan
  p1[1]  = 23;
  p1[8]  ="M"; p1[9]  ="M"; p1[10]  =30
  p1[40] ="M"; p1[41] ="M"; p1[42]  =60
  p1[104]="M"; p1[105]="M"; p1[106]=122
  p1[456]=480
  for (i = 1; i <= 960 ; i++) {
    if (p1[i]) 
      p2[i] = p1[i]
    else
      p2[i] = p2[i-1] + 1
  }

  if ((page < 1) || (page > 960)) {
    print "page out of range" > "/dev/stderr"
    exit 0
  }
  else if (p2[page] == "M") {
    print "page " page " missing" > "/dev/stderr"
    exit 0
  }
  else
    return p2[page]
}

# ImageMagick tricks

# magick display -crop 4510x6000+0+450 -resize x1080 p26.tif

# Old method for finding whitespace, use slim bands
# for h in `seq 1000 200 5000`
# do
#   BLACK=`convert out.tif -crop 4510x10+0+$h -threshold 80%             \
#     -format %c -define histogram:unique-colors=true histogram:info:-    \
#     | gawk 'BEGIN{z=0} /#000000/ {gsub(/:/,"",$1); if ($1+0 > 100) z=1}   \
#            END{print z}'`
#     # record the first
#     if [ $BLACK -eq 0 -a $INWHITE -eq 0 ]
#     then
#         let WSTART=h
#         let INWHITE=1
#     elif [ $BLACK -eq 1 -a $INWHITE -eq 1 ]
#     then
#         let WEND=h-190
#         let INWHITE=0
#         # assume that the main break has been found and bail
#         break
#     fi
#     # echo $h $BLACK $INWHITE $WSTART $WEND 
# done
# let SPLIT=`gawk "BEGIN{print int($WSTART+(($WEND-$WSTART)/2))}"`
# echo $WSTART $WEND $SPLIT
# # now crop:
# let H2=6000-$SPLIT
# convert out.tif -crop 4510x$SPLIT+0+0 top.tif
# convert out.tif -crop 4510x$H2+0+$SPLIT bot.tif

