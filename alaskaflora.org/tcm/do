#!/bin/gawk -f

# A webapp for managing Taxon Concept Mapping data with a MySQL DB
# (c) Cam Webb <cw@camwebb.info>, 2020; License: GPL v3

# INSTALLATION
#
# 1. If using Apache httpd, install this file in a cgi executable
#    location and create a .htaccess file, minimally: 
#        Options +ExecCGI -Indexes
#        <Files "do">
#          SetHandler cgi-script
#        </Files>
#        DirectoryIndex do
#    Optionally add:
#        <FilesMatch "^\.pw$">
#          Deny from all
#        </FilesMatch>
#        AuthType Basic
#        AuthName "Password Protected"
#        AuthUserFile /full/path/to/.pw
#        Require valid-user
#
# 2. Install function libraries from https://github.com/camwebb/awk-lib
#    and include, using full path

# @include "/usr/local/share/awk/db_sql.awk"
@include "/usr/local/share/awk/util_http.awk"
@include "../../lib/db_secrets.awk"

# 3. On any available MySQL or MariaDB DB, install the empty DB at
#    http://alaskaflora.org/tcm/tcm.sql and modify as needed. Make sure
#    the access info is in the included db_secrets.awk


# TODO - get rid of table variable - use f["table"]

BEGIN{
  PROCINFO["sorted_in"] = "@ind_str_asc"

  # Init
  DATABASE = "tcm"
  # Config:
  #   table1 { table_atts { table, full_name, sort_field, foreign_show } /
  #   fields { field1 { fieldname, full_name, ci, sort_order , foreign_id? } ;
  #           field2 ; ... | table2 | ...
  Config = \
    "pub , Publication , auth , code   /" \
    "  id   , ID     , i , 0           ;" \
    "  code , Code   , c , 1           ;" \
    "  auth , Author , c , 2           |" \
    "name ,Taxon_Name , code , code    /" \
    "  id    , ID    , i , 0           ;" \
    "  code  , Code  , c , 1           ;" \
    "  pubID , Publication ,i , 2 , pub      "
  config()
  db_secrets()

  # READ QUERY STRING
  split(ENVIRON["QUERY_STRING"], qs, "&")
  for (i in qs) {
    split(qs[i], qp, "=")
    f[qp[1]] = substr(urldecode(qp[2]),1,2000)
  }
  clean_quotes();
  
  # DETERMINE AND EXECUTE METHOD
  if (f["table"]) {
    if (f["action"] == "show") 
      show(f["table"])
    else if ((f["action"] == "add") || (f["action"] == "edit")) 
      addedit(f["table"])
  }
  else defaultpage()
  
}

function defaultpage(   i)
{
  header("TCM");

  print "<h1>TCM</h1>"
  print "<p>Go to table:</p>" 
  print "<ul>"
  for (i in Tlabel)
    print "<li><a href=\"do?table=" i "&amp;action=show\">" Tlabel[i]   \
      "</a></p>"
  print "</ul>"
  
  footer()
}


# =========================== Generic functions ============================

function header(title) {
  # version history: [chars app] -> here
  
  # Use html5
  print "Content-type: text/html\n"
  print "<!DOCTYPE html>"
  print "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
  print "<head><title>" title "</title>"
  print "<meta http-equiv=\"Content-Type\" content=\"text/html; \
           charset=utf-8\" />"
  print "<link href=\"https://fonts.googleapis.com/css?family=Montserrat\" \
           rel=\"stylesheet\"/>"
  print "<link href=\"../img/akflora.ico\" rel=\"shortcut icon\" \
           type=\"image/x-icon\"/>"
  print "<style>"
  print "body { font-size: 14px; width: 1200px;	font-family: 'Montserrat', \
         Verdana, Arial, Helvetica, sans-serif; padding: 20px; \
         position: absolute }"
  print "select , option { font-size: 14px }"
  print "table { max-width: 1200px; border-collapse: collapse }"
  print "td, th { border: 1px solid black; padding: 3px }"
  print "a { color:#15358d; text-decoration:none; border-bottom-style:none }"
  print "a:visited { color:#9f1dbc }"
  print "a:hover {color:#15358d; border-bottom-style:solid; \
	     border-bottom-width:thin }"
  print ".syn1:hover .syn2 {display: none;}"
  print ".syn1:hover .syn3 {display: block;}"
  print ".syn3 {display: none;}"
  print ".main {margin-left:200px; margin-right:200px;}"
  print "</style>"
  print "</head>\n<body>"
  print "<div class=\"main\">"
}


function footer() {
  print "</div>"
  print "</body>\n</html>";
}

function show(table,   x, n, i, j, sql, lookup) {
  # version history: this is original version
  
  header(Tlabel[table])

  print "<h1>" Tlabel[table] "</h1>"
  
  if (f["preaction"])
    preaction(table)
  
  print "<table>"

  # Table header
  print "<tr>"
  for (i = 1; i <= length(Forder[table]); i++)
    print "<th>" Flabel[table][Forder[table][i]] "</th>"
  print "<th></th><th></th>"
  print "</tr>"

  # make lookups
  for (i = 1; i <= length(Forder[table]); i++)
    if (Fforid[table][Forder[table][i]]) {
      db_query(DATABASE, "SELECT id, `"                             \
               Tforshow[Fforid[table][Forder[table][i]]] "` FROM `" \
               Fforid[table][Forder[table][i]] "`;")
      for (j = 1; j <= DBQr; j++) {
        lookup[Fforid[table][Forder[table][i]]][DBQ[j,"id"]] =             \
          DBQ[j, Tforshow[Fforid[table][Forder[table][i]]]]
        # print i, DBQ[j,"id"], Forder[table][i],  DBQ[j, Tforshow[Fforid[table][Forder[table][i]]]]
      }
      db_clear()
    }

  # for (i in lookup)
  #   for (j in lookup[i])
  #     print i, j, lookup[i][j]
  
  # Table rows
  db_query(DATABASE, "SELECT * FROM `" table "` ORDER BY `" Tsort[table] ";" )
  for (i = 1; i <= DBQr; i++) {
    print "<tr>"
    for (j = 1; j <= length(Forder[table]); j++) {
      if (Fforid[table][Forder[table][j]])
        # print Fforid[table][Forder[table][j]], DBQ[i , Forder[table][j]]
        print "<td>" lookup[ Fforid[table][Forder[table][j]] ][ DBQ[i , Forder[table][j]]] "</td>"
      else
        print "<td>" DBQ[i,Forder[table][j]] "</td>"
    }
    # Edit
    print "<td><a href=\"do?table=" table "&amp;action=edit&amp;id=" \
      DBQ[i,"id"] "\">edit</a></td>"
    # Delete
    print "<td><a href=\"do?table=" table "&amp;action=show&amp;preaction=delete&amp;id=" \
      DBQ[i,"id"] "\" onclick=\"return"                                 \
      " confirm('Confirm deletion')\">delete</a></td>"
    print "</tr>"
  }
  db_clear()

  print "</table>"

  print "<p><a href=\"do?table=" table "&amp;action=add\">New entry</a>"

  print "<p><a href=\"do\">Home</a></p>"

  
  footer()
}


function db_query(db, query            , row, i, cmd, preFS ) {
  # version history: [awk-lib] -> [asriSMS] -> here

  gsub(/`/,"\\`", query)  # if writing directly in awk script, need: \\\`
  gsub(/\n/," ", query)
  gsub(/  */," ", query)
  cmd = "/bin/echo -e \"" query "\" | mysql -u " DBUSER[db] " -p" \
    DBPASSWORD[db] " -h " DBHOST[db] \
    " -B --column-names --default-character-set=utf8 " DBNAME[db] 
  row = -1
  preFS = FS
  FS = "\t"
  while ((cmd | getline ) > 0) {
    row++
    if (row == 0) {
      DBQc = NF
      for (i = 1; i <= NF; i++) DBQf[i] = $i
    }
    else {
      for (i = 1; i <= NF; i++) {
        gsub(/NULL/,"",$i)
        DBQ[row, DBQf[i]] = $i
      }
    }
  }
  close(cmd)
  # In the case of Empty Set
  if (row == -1) row = 0
  DBQr = row
  FS = preFS
}

function db_clear() {

  delete DBQ
  delete DBQf
  DBQr = 0
  DBQc = 0
}

function db_sql(db, query            , cmd, inRS, mysqlout ) {
  # version 2; history: [awk-lib] -> [asriSMS] -> here

  gsub(/\n/," ",query)
  gsub(/  */," ",query)
  inRS = RS
  RS = "\x04"
  cmd = "mysql -u " DBUSER[db]                              \
    " -p" DBPASSWORD[db] " -h " DBHOST[db] " " DBNAME[db] " 2>&1"
  # not using system(). This way allows v long SQL statements
  # system() returns mysql exit code. Here, we send stderr to stdout
  print query |& cmd
  close(cmd, "to")
  cmd |& getline mysqlout
  close(cmd,"from")
  RS = inRS
  return mysqlout

  # # check the db is accessible
  # e = db_sql("asrisms1", "SELECT '  OK' AS 'testing DB connection...';")
  # if (e)
  #   error("Database not accessible")
}

function addedit(table, fshow,     x, n, i) {
  # version history: this is original version

  if (f["action"] == "edit") {
    header("Editing " Tlabel[table] ", record " f["id"])
    print "<h1>Editing " Tlabel[table] ", record " f["id"] "</h1>"
  }
  else if (f["action"] == "add") {
    header("New " Tlabel[table])
    print "<h1>New " Tlabel[table] " record</h1>"
  }
  else defaultpage()
  
  print "<form action=\"do\">"
  print "<input type=\"hidden\" name=\"table\" value=\"" table "\"/>"
  print "<input type=\"hidden\" name=\"action\" value=\"show\"/>"
  print "<input type=\"hidden\" name=\"preaction\" value=\"" f["action"] "\"/>"

  if (f["action"] == "edit") {
    print "<input type=\"hidden\" name=\"id\" value=\"" f["id"] "\"/>"
    db_query(DATABASE, "SELECT * FROM `" table "` WHERE id = " f["id"] ";")
  }
  
  print "<table>"
  for (i = 1; i <= length(Forder[table]); i++) { 
    print "<tr>"
    print "<td align=\"right\">" Flabel[table][Forder[table][i]] "</td>"
    print "<td><input type=\"text\" name=\"f-" Forder[table][i] "\" size=\"30\"" \
      " value=\"" DBQ[1, Forder[table][i]] "\"/></td>"
    # TODO - deal with quotes
    print "</tr>"
  }
  print "</table>"
  print "<p><input type=\"submit\" value=\"GO\"/></p>"
  print "</form>"

  db_clear()
  footer()
}

function config(    t, t2, ta, f, fa,     i, j, forderx) {
  # Config:
  #   table1 { table_atts { table, full_name, sort_field, foreign_show } /
  #   fields { field1 { fieldname, full_name, ci, sort_order , foreign_id? } ;
  #           field2 ; ... | table2 | ...

  gsub(/ /,"",Config)
  gsub(/_/," ",Config)

  # split into tables
  split(Config, t, "|")
  for (i in t) {

    # split into table atts and fields
    split(t[i],t2,"/")

    # table atts
    split(t2[1] ,ta,",")
    Tlabel[ta[1]]   = ta[2]
    Tsort[ta[1]]    = ta[3]
    Tforshow[ta[1]] = ta[4]

    # fields
    split(t2[2], f, ";")
    for (j in f) {
      split(f[j], fa, ",")
      Flabel[ ta[1]][fa[1]]  = fa[2]
      Ftype[  ta[1]][fa[1]]  = fa[3] # c (char) or i (int)
      forderx[ta[1]][fa[1]]  = fa[4] # 1...n ; if 0, do not print
      Fforid[ ta[1]][fa[1]]  = fa[5] # 
    }
    # swap forderx to Forder
    for (j in forderx[ta[1]])
      if (forderx[ta[1]][j])
        Forder[ta[1]][forderx[ta[1]][j]] = j
  }
}

function clean_quotes() {
   # clean text input in case of attempt to insert as SQL
   for (i in f) {
     gsub(/'/,"\\'", f[i])
     gsub(/"/,"\\\"",f[i])
   }
}

function preaction(table, sql, i, err) {
  if (f["preaction"] == "add") {
    sql = "INSERT INTO `" table "` ("
    for (i in f)
      if (substr(i,1,2) == "f-")
        sql = sql "`" substr(i,3) "`, "
    gsub(/, $/,"",sql)
    sql = sql ") VALUES ("
    for (i in f)
      if (substr(i,1,2) == "f-") {
        if (Ftype[table][substr(i,3)] == "c")
          sql = sql "'" f[i] "', "
        else
          sql = sql f[i] ", "
      }
    gsub(/, $/,"",sql)
    sql = sql ");"
    # print sql
  }

  if (f["preaction"] == "edit") {
    sql = "UPDATE `" table "` SET "
    for (i in f)
      if (substr(i,1,2) == "f-") {
        sql = sql "`" substr(i,3) "` = "
        if (Ftype[table][substr(i,3)] == "c")
          sql = sql "'" f[i] "', "
        else
          sql = sql f[i] ", "
      }
    gsub(/, $/,"",sql)
    sql = sql " WHERE `id` = " f["id"] " ;"
    print sql
  }
  else if (f["preaction"] == "delete")
    sql = "DELETE FROM`" table "` WHERE id = " f["id"] ";"

  err = db_sql(DATABASE, sql)
  if (err)
    print "<p style=\"color:red;\">FAILED: " err "</p>"
  else print "<p style=\"color:green;\">Success</p>"
}
