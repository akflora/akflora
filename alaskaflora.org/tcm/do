#!/bin/gawk -f

# A webapp for managing Taxon Concept Mapping data with a MySQL DB
# (c) Cam Webb <cw@camwebb.info>, 2020; License: GPL v3

@include "../../lib/db_secrets.awk"

# TODO - create e.g., 'linked names' link in show pubs leading to a WHERE
# DEV - use -L to lint on regular basis
#     - the solution to sorting on the lookup of tcm.tc1ID, i.e.,
#       creating a dummy, updated field tc1lab, is a kludge. Other fixes
#       would require big rewrites (awk sorting, or ORDER BY using two tables
# DB: use field types, foreign keys, and triggers to validate
#     and GRANT (only) SELECT to prevent user editing of Code Tables

BEGIN{
  PROCINFO["sorted_in"] = "@ind_str_asc"

  # Init
  DATABASE = "tcmonline"
  # DEBUG = 1
  # Config:
  #   table1 { table_atts {
  #              table, full_name, sort_field, foreign_show, select, filter } /
  #   fields { field1 { fieldname, full_name, ci, grid_show , foreign_id? } ;
  #           field2 ; ... | table2 | ...
  # fields not listed here will be ignored
  # if comma is needed, code with ^ 
  # foreign_show is SQL, e.g. CONCAT%5FWS('_'%2C_`code`%2C_`auth`)
  Config = \
    "pub , Publication , code , code , SELECT_*_FROM_`pub`, `show`_=_1  /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  code   , Code         , c , 1 ,     ;" \
    "  pubtypeID , Pub_type  , i , 0 , pubtype;" \
    "  author , Authors      , c , 0 ,     ;" \
    "  year   , Year         , c , 1 ,     ;" \
    "  title  , Title        , c , 1 ,     ;" \
    "  journal, Journal_or_Book , c , 0 ,     ;" \
    "  volume , Volume       , c , 0 ,     ;" \
    "  pages  , Pages        , c , 0 ,     ;" \
    "  publisher, Publisher  , c , 0 ,     ;" \
    "  address, Address      , c , 0 ,     ;" \
    "  doi    , DOI          , c , 1 ,     ;" \
    "  url    , URL          , c , 1 ,     ;" \
    "  bhlPf  ,BHL_pg1_ID    , i , 1 ,     ;" \
    "  bhlPl  ,BHL_last_page_ID,i, 0 ,     ;" \
    "  notes  , Notes        , n , 0 ,     ;" \
    "  show   , Show         , b , 0 ,     |" \
    "pubtype  , Pub_type0 , id , label, SELECT_*_FROM_`pubtype` ,   /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  label  , Label        , c , 1 ,     |" \
    "name , Name , code , code, SELECT_*_FROM_`name` , `show`_=_1  /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  code   , Code         , c , 1 ,     ;" \
    "  genus  , Genus        , c , 1 ,     ;" \
    "  species, species      , c , 1 ,     ;" \
    "  irankID, rank         , i , 1 ,irank ;" \
    "  infrasp, infrasp      , c , 1 ,     ;" \
    "  author , Author       , c , 1 ,     ;" \
    "  pubID  , Orig._Publ.  , i , 1 , pub ;" \
    "  url    , URL          , c , 0 ,     ;" \
    "  notes  , Notes        , n , 0 ,     |" \
    "irank , Infra_rank0 , id , label, SELECT_*_FROM_`irank`, /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  label  , Label        , c , 1 ,     |" \
    "tc , Taxon_Concept, code,code,SELECT_*_FROM_`tc` , `show`_=_1 /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  code   , Code         , c , 1 ,     ;" \
    "  nameID , Name         , i , 1 , name;" \
    "  pubID  , Publication  , i , 1 , pub ;" \
    "  bhlPf  ,BHL_pg1_ID    , i , 1 ,     ;" \
    "  bhlPl  ,BHL_last_page_ID,i, 0 ,     ;" \
    "  foak  , Fl  , b, 1  ,            ;" \
    "  notes  , Notes        , n , 0 ,     |" \
    "rel , Relationship0 , id , label , SELECT_*_FROM_`rel` ,  /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  label  , Label        , c , 1 ,     |" \
    "syn , Synonym0 , id , label ,  SELECT_*_FROM_`syn`,       /" \
    "  id     , ID           , i , 0 ,     ;" \
    "  label  , Label        , c , 1 ,     |" \
    "tcm , TC_Relationships , code , id , SELECT_tcm.*%2C_tc.code%2Ctc.foak_FROM_`tcm`%2C`tc`_WHERE_tc.id_=_tcm.tc1ID , `tcm`.`show`_=_1   /"    \
    "  id     , ID           , i , 0 ,     ;" \
    "  tc1ID  , TC1_newer     , i , 1 , tc  ;" \
    "  relID  , Relation     , i , 1 , rel ;" \
    "  synID  , Synonymy     , i , 1 , syn ;" \
    "  tc2ID  , TC2_older    , i , 1 , tc  ;" \
    "  pubID  ,  Publication , i , 1 , pub ;" \
    "  graph  , Graph        , b , 1 ,     ;" \
    "  notes  , Notes        , n , 0 ,     ;" \
    "  show   , Show         , b , 0 ,      "
  config()
  db_secrets()

  # READ QUERY STRING
  split(ENVIRON["QUERY_STRING"], qs, "&")
  for (q in qs) {
    split(qs[q], qp, "=")
    f[qp[1]] = substr(urldecode(qp[2]),1,2000)
  }
  clean_quotes();
  
  # DETERMINE AND EXECUTE METHOD
  if (f["table"]) {
    if (f["action"] == "show")
      show()
    else if ((f["action"] == "showone") && f["id"])
      showone()
    else if (f["action"] == "add")
      addedit()
    else if ((f["action"] == "edit") && f["id"])
      addedit()
  }
  
  # Non-generic
  else if (f["action"] == "graph")
    graph()
  else if (f["action"] == "hideall")
    hide("hideall")
  else if (f["action"] == "unhideall")
    hide("unhideall")

  else defaultpage()
  
}

# ========================= Pages =========================================

function header(title) {
  # version history: [chars app] -> here
  
  # Use html5
  print "Content-type: text/html\n"
  print "<!DOCTYPE html>"
  print "<html xmlns=\"http://www.w3.org/1999/xhtml\">"
  print "<head><title>" title "</title>"
  print "<meta http-equiv=\"Content-Type\" content=\"text/html; \
           charset=utf-8\" />"
  print "<link href=\"https://fonts.googleapis.com/css?family=Montserrat\" \
           rel=\"stylesheet\"/>"
  print "<link href=\"../img/akflora.png\" rel=\"shortcut icon\" \
           type=\"image/x-icon\"/>"
  print "<style>"
  print "body { font-size: 14px; font-family: 'Montserrat', " \
    "Verdana, Arial, Helvetica, sans-serif; }"
  print ".main {width: 1000px; padding-top: 30px; margin-left: auto;"\
    "  margin-right: auto; }"
  print ".info {max-width: 600px; }"
  print ".navbar { float: right; }"
  print "h1 { padding-top:20px; }"
  print "select , option { font-size: 14px }"
  print "table { border-collapse: collapse }"
  print "td, th { border: 1px solid black; padding: 5px }"
  print "a { color:#15358d; text-decoration:none; border-bottom-style:none }"
  print "a:visited { color:#9f1dbc }"
  print "a:hover {color:#15358d; border-bottom-style:solid; \
	     border-bottom-width:thin }"
  print ".graph { max-width: 100%; }"
  print "</style>"
  print "</head>\n<body>"
  print "<div class=\"main\">"
}


function footer() {
  print "</div>"
  print "</body>\n</html>";
}



function show(      x, n, i, j, k, sql) {
  # version history: this is original version

  header(Tlabel[f["table"]])

  navbar()
  
  print "<h1>" Tlabel[f["table"]] "</h1>"
  
  if (f["preaction"])
    preaction()

  ## NOT GENERIC
  if (f["table"] == "tc")
    print "<form action=\"do\">"
  
  print "<table>"

  # check for linked tables
  for (i in Tlabel)
    for (j in Flabel[i])
      if (Fforid[i][j] == f["table"]) {
        backt[++k] = i
        backf[k]   = j
      }

  make_lookup(0)  # filter off: all foreign values looked up
  
  # Query DB
  # filters
  if(f["searchbox"])
    # if search box, override the `show` = 1, etc.
    # note that if the sort field is numeric, the search must be numeric
    # which will not be possible for the user
    where = " AND `" Tsort[f["table"]] "` LIKE '" \
      gensub(/'/,"\\'","G",f["searchbox"]) "'"
  else if (Tfilter[f["table"]])
    where = " AND " Tfilter[f["table"]]

  # add any user-created filters
  if(f["where"]) 
    where = where " AND " f["where"]

  sql = Tselect[f["table"]] where " ORDER BY `" Tsort[f["table"]] "`;"
  if (DEBUG)
    printdebug(sql)
  db_query(DATABASE,  sql)

  # Table header
  print "<tr>"
  for (i = 1; i <= length(Fgorder[f["table"]]); i++)
    print "<th>" Flabel[f["table"]][Fgorder[f["table"]][i]] "</th>"
  print "<th style=\"border:none;\"></th><th style=\"border:none;\"></th>"\
    "<th style=\"border:none;\"></th>"

  # backlinks
  for (i in backt)
    # print "<th style=\"font-size:smaller;\">used in<br/>" Tlabel[backt[i]] ":<br/>" Flabel[backt[i]][backf[i]] "</th>"
    print "<th style=\"border:none;\"></th>"

  ## NOT GENERIC
  if (f["table"] == "tc")
    print "<th style=\"border:none;\"></th>"
  
  print "</tr>"

  # Table rows
  for (i = 1; i <= DBQr; i++) {
    print "<tr name=\"id" DBQ[i,"id"] "\">"
    for (j = 1; j <= length(Fgorder[f["table"]]); j++) {
      # show lookup value if the field is a foreign key
      if (Fforid[f["table"]][Fgorder[f["table"]][j]]) {
        print "<td><a href=\"do?table=" \
          Fforid[f["table"]][Fgorder[f["table"]][j]]                     \
          "&amp;action=show&amp;where=id%3D" DBQ[i , Fgorder[f["table"]][j]] \
          "\">"  Lookup[ Fforid[f["table"]][Fgorder[f["table"]][j]] ][  \
            DBQ[i , Fgorder[f["table"]][j]]] "</a></td>"
      }
      else {
        # special formatting
        # DOIs and HTTP
        if (tolower(Fgorder[f["table"]][j]) == "doi")
          print "<td><a href=\"https://doi.org/" gensub(/^[dD][oO][iI]:/,"","G", DBQ[i,Fgorder[f["table"]][j]])  "\">" substr( DBQ[i,Fgorder[f["table"]][j]] , 1,15) "</a></td>"
        # NON GENERIC:
        else if (Fgorder[f["table"]][j] ~ /^bhlP/)
          print "<td><a href=\"https://www.biodiversitylibrary.org/page/" \
            DBQ[i,Fgorder[f["table"]][j]] "\">" DBQ[i,Fgorder[f["table"]][j]] \
            "</a></td>"

        else if (DBQ[i,Fgorder[f["table"]][j]] ~ /^https?/)
          print "<td><a href=\"" DBQ[i,Fgorder[f["table"]][j]] "\">" \
            substr( gensub(/^https?:\/\//,"","G",DBQ[i,Fgorder[f["table"]][j]])\
                    , 1, 15) "</a></td>"
        # if the field is long, but also if it is not the sort/code field
        else if ((length(DBQ[i,Fgorder[f["table"]][j]]) > 20) && \
                 (Fgorder[f["table"]][j] != Tsort[f["table"]]))
          print "<td>" substr(DBQ[i,Fgorder[f["table"]][j]],1,20) "...</td>"
        else print "<td>" DBQ[i,Fgorder[f["table"]][j]] "</td>"
      }
    }
    

    # View
    print "<td style=\"border:none;\"><a href=\"do?table=" f["table"] \
      "&amp;action=showone&amp;id=" DBQ[i,"id"] "\">V</a></td>"
    # Edit
    print "<td style=\"border:none;\"><a href=\"do?table=" f["table"] \
      "&amp;action=edit&amp;id=" DBQ[i,"id"] "\">E</a></td>"
    # Delete
    print "<td style=\"border:none;\"><a href=\"do?table=" f["table"] \
      "&amp;action=show&amp;preaction=delete&amp;id="                   \
      DBQ[i,"id"] "\" onclick=\"return"                                 \
      " confirm('Confirm deletion')\">D</a></td>"

    # backlinks
    for (j in backt)
      print "<td style=\"border:none; font-size:smaller;\">"\
        "<a href=\"do?table=" backt[j] "&amp;action=show&amp;where=" \
        backf[j] "%3D" DBQ[i,"id"] "\">[" backt[j] "]</a></td>"

    ## NOT GENERIC
    if (f["table"] == "tc")
      print "<td style=\"border:none;\"><input type=\"checkbox\" name=\"tc" DBQ[i,"id"] \
        "\" value=\"1\"/></td>"
    
    print "</tr>"
  }
  db_clear()

  print "</table>"

  ## NOT GENERIC
  if (f["table"] == "tc") {
    print "<input type=\"hidden\" name=\"action\" value=\"show\"/>"
    print "<input type=\"hidden\" name=\"table\" value=\"tcm\"/>"
    print "<input type=\"hidden\" name=\"preaction\" value=\"bc\"/>"
    print "<p>"
    print "<input type=\"submit\" value=\"Make congruent TCMs for checked TCs\"/>"
    print "</p>"
    print "</form>"
  }
  
  print "<form action=\"do\"><p><a href=\"do?table=" f["table"] \
    "&amp;action=add\">"
  print "<b>Add</b></a>&#160;&#160;|&#160;&#160;<input type=\"hidden\" "\
    "name=\"table\" value=\"" f["table"] "\"/><input type=\"hidden\" "\
    "name=\"action\" value=\"show\"/><input type=\"text\" name=\"searchbox\" "\
    "size=\"30\"/> <input type=\"submit\" value=\"Search\"/> "\
    "<span style=\"font-size:smaller;\">(Searches on primary sort field; "\
    "use '%' as wildcard)</span></p></form>"

  footer()
}


function showone(      x, n, i, j, sel, sql) {
  # version history: this is original version

  header(Tlabel[f["table"]] ", record " f["id"])

  navbar()
  
  print "<h1>" Tlabel[f["table"]] ", record " f["id"] "</h1>"

  make_lookup(0)

  sql = Tselect[f["table"]] " AND `" f["table"] "`.id = " f["id"] ";"
  if (DEBUG)
    printdebug(sql)
  db_query(DATABASE, sql)
  
  print "<table>"
  for (i = 1; i <= length(Forder[f["table"]]); i++) {
    print "<tr>"
    print "<td align=\"right\">" Flabel[f["table"]][Forder[f["table"]][i]] \
      "</td>"
    if (Fforid[f["table"]][Forder[f["table"]][i]]) {
      print "<td><a href=\"do?table="                                   \
        Fforid[f["table"]][Forder[f["table"]][i]]                       \
          "&amp;action=show#id" DBQ[1 , Forder[f["table"]][i]] "\">"    \
          Lookup[ Fforid[f["table"]][Forder[f["table"]][i]] ][          \
            DBQ[1 , Forder[f["table"]][i]]] "</a></td>"
    }
    else {
      # DOIs and HTTP
      if (tolower(Forder[f["table"]][i]) == "doi")
        print "<td><a href=\"https://doi.org/" gensub(/^[dD][oO][iI]:/,"","G", DBQ[1,Forder[f["table"]][i]])  "\">" DBQ[1,Forder[f["table"]][i]]  "</a></td>"
      # NON GENERIC
      else if (Forder[f["table"]][i] ~ /^bhlP/)
        print "<td><a href=\"https://www.biodiversitylibrary.org/page/" \
          DBQ[1,Forder[f["table"]][i]] "\">" DBQ[1,Forder[f["table"]][i]] \
          "</a></td>"
      
      else if (substr(DBQ[1, Forder[f["table"]][i]],1,4) == "http")
        print "<td><a href=\"" DBQ[1,Forder[f["table"]][i]] "\">" DBQ[1,Forder[f["table"]][i]] "</a></td>"
      else print "<td>" DBQ[1,Forder[f["table"]][i]] "</td>"
    }
    print "</tr>"
  }
  print "</table>"

  print "<p><a href=\"do?table=" f["table"]                             \
    "&amp;action=edit&amp;id=" f["id"] "\"><b>Edit</B></a>"             \
    "&#160;&#160;|&#160;&#160;"                                         \
    "<a href=\"do?table=" f["table"]                                    \
    "&amp;action=show&amp;preaction=delete&amp;id="                     \
    f["id"] "\" onclick=\"return"                                       \
    " confirm('Confirm deletion')\"><b>Delete</b></a></td>"
  
  db_clear()
  footer()
}


function addedit(      x, n, i, j, sel, sql, schema) {
  # version history: this is original version

  if (f["action"] == "edit")
    header("Editing " Tlabel[f["table"]] ", record " f["id"])
  else if (f["action"] == "add")
    header("New " Tlabel[f["table"]])
  else defaultpage()

  navbar()
  
  if (f["action"] == "edit") 
    print "<h1>Editing " Tlabel[f["table"]] ", record " f["id"] "</h1>"
  else if (f["action"] == "add")
    print "<h1>New " Tlabel[f["table"]] " record</h1>"

  make_lookup(1) # filter the lookups by `show` value
  
  # # get NOT NULLs etc
  # for (i in Tlabel)  
  #   sql = sql "SHOW CREATE TABLE `" i "`; "
  # schema = db_sql(DATABASE, sql)
  # # print "<pre>" schema "</pre>"
    
  print "<form action=\"do\">"
  print "<input type=\"hidden\" name=\"table\" value=\"" f["table"] "\"/>"
  print "<input type=\"hidden\" name=\"action\" value=\"show\"/>"
  print "<input type=\"hidden\" name=\"preaction\" value=\"" f["action"] "\"/>"

  if (f["action"] == "edit") {
    print "<input type=\"hidden\" name=\"id\" value=\"" f["id"] "\"/>"
    sql = "SELECT * FROM `" f["table"] "` WHERE id = " f["id"] ";"
    if (DEBUG)
      printdebug(sql)
    db_query(DATABASE, sql)
  }

  print "<table>"
  for (i = 1; i <= length(Forder[f["table"]]); i++) {
    # omit foreign fields
    if (Ftype[f["table"]][Forder[f["table"]][i]] == "f")
      continue
    print "<tr>"
    print "<td align=\"right\">" Flabel[f["table"]][Forder[f["table"]][i]] \
      "</td>"
    # if a Foreign ID, create dropdown
    if (Fforid[f["table"]][Forder[f["table"]][i]]) {
      print "<td>"
      print "<select name=\"f-" Forder[f["table"]][i] "\" autocomplete=\"off\">"
      # See for firefox bug: https://stackoverflow.com/questions/4831848/
      #  firefox-ignores-option-selected-selected
      # if value is NULL
      if ((DBQ[1, Forder[f["table"]][i]] == "NULL") ||
          (f["action"] == "add"))
        print "<option value=\"NULL\" selected=\"selected\"></option>"
      else
        print "<option value=\"NULL\"></option>"
      PROCINFO["sorted_in"] = "@val_str_asc"
      for (j in Lookup[ Fforid[f["table"]][Forder[f["table"]][i]] ]) {
        if (j == DBQ[1, Forder[f["table"]][i]])
          sel = " selected=\"selected\""
        else sel= ""
        print "<option value=\"" j "\"" sel ">"                            \
          Lookup[ Fforid[f["table"]][Forder[f["table"]][i]] ][j] "</option>"
      }
      PROCINFO["sorted_in"] = "@ind_str_asc"

      # just in case the value does not appear in the Lookup, because of
      # a filter
      if (!Lookup[ Fforid[f["table"]][Forder[f["table"]][i]] ][ \
             DBQ[1, Forder[f["table"]][i]] ] && (f["action"] == "edit" ))
        print "<option value=\"" DBQ[1, Forder[f["table"]][i]] "\""  \
          " selected=\"selected\"" ">Record ID = " \
          DBQ[1, Forder[f["table"]][i]] " (currently hidden)</option>"
 
      print "</select>"
      print "</td>"
    }
    else if (Ftype[f["table"]][Forder[f["table"]][i]] == "n")
        print "<td><textarea style=\"height:100px;width:300px;\" name=\"f-" \
          Forder[f["table"]][i] "\">" DBQ[1, Forder[f["table"]][i]] \
          "</textarea></td>"
    else if (Ftype[f["table"]][Forder[f["table"]][i]] == "b") {
      # had previously used a checkbox, but this creates problems:
      #   https://stackoverflow.com/a/1992745/563709
      
      print "<td>"
      print "<select name=\"f-" Forder[f["table"]][i] "\" autocomplete=\"off\">"
      if (DBQ[1, Forder[f["table"]][i]] == "0") {
        print "<option value=\"NULL\"></option>"
        print "<option value=\"0\" selected=\"selected\">no</option>"
        print "<option value=\"1\">yes</option>"
      }
      else if (DBQ[1, Forder[f["table"]][i]] == "1") {
        print "<option value=\"NULL\"></option>"
        print "<option value=\"0\">no</option>"
        print "<option value=\"1\" selected=\"selected\">yes</option>"
      }
      else {
        print "<option value=\"NULL\" selected=\"selected\"></option>"
        print "<option value=\"0\">no</option>"
        print "<option value=\"1\">yes</option>"
      }
      print "</select>"
      print "</td>"
    }
    
    else
        print "<td><input type=\"text\" name=\"f-" Forder[f["table"]][i] \
          "\" size=\"30\" value=\"" DBQ[1, Forder[f["table"]][i]] "\"/></td>"
    print "</tr>"
  }
  print "</table>"
  print "<p><input type=\"submit\" value=\"GO\"/></p>"
  print "</form>"

  db_clear()
  footer()
}


function preaction(     sql, i, j, err, bcid) {

  if (f["preaction"] == "add") {
    sql = "INSERT INTO `" f["table"] "` ("
    for (i in f)
      if (substr(i,1,2) == "f-")
        sql = sql "`" substr(i,3) "`, "
    gsub(/, $/,"",sql)
    sql = sql ") VALUES ("
    for (i in f)
      if (substr(i,1,2) == "f-") {
        # if blank, translate to NULL
        if (!f[i])
          sql = sql "NULL , "
        else if ((Ftype[f["table"]][substr(i,3)] == "c") ||    \
            (Ftype[f["table"]][substr(i,3)] == "n"))
          sql = sql "'" f[i] "', "
        else
          sql = sql f[i] ", "
      }
    gsub(/, $/,"",sql)
    sql = sql ");"
    if (DEBUG)
      printdebug(sql)
    err = db_sql(DATABASE, sql)
  }
  
  if (f["preaction"] == "edit") {
    sql = "UPDATE `" f["table"] "` SET "
    for (i in f)
      if (substr(i,1,2) == "f-") {
        sql = sql "`" substr(i,3) "` = "

        # Translate NULLs
        if (!f[i])
          sql = sql "NULL , "
        else if ((Ftype[f["table"]][substr(i,3)] == "c") || \
            (Ftype[f["table"]][substr(i,3)] == "n"))
          sql = sql "'" f[i] "', "
        else
          sql = sql f[i] ", "
      }
    gsub(/, $/,"",sql)
    sql = sql " WHERE `id` = " f["id"] " ;"
    if (DEBUG)
      printdebug(sql)
    err = db_sql(DATABASE, sql)
  }
  else if (f["preaction"] == "delete") {
    sql = "DELETE FROM`" f["table"] "` WHERE id = " f["id"] ";"
    err = db_sql(DATABASE, sql)
  }

  ## NOT GENERIC - batch creation of congruent
  else if (f["preaction"] == "bc") {
    # which tc IDs to make congruent?
    for (i in f)
      if (i ~ /^tc/) {
        bcid[substr(i, 3)]++
        nbc++
      }

    # check for 2 or more
    if (nbc < 2)
      err = "Only " (nbc + 0) " TCs checked. Two or more are needed"
    else {
      # get dates of the tcs
      
      db_query(DATABASE, "SELECT tc.id, pub.year FROM tc, pub WHERE "\
               "tc.pubID = pub.id ORDER BY pub.year DESC;")
      # run through all TCs newest to oldest, and check if any are selected
      for (i = 1; i <= DBQr; i++)
        if (bcid[DBQ[i, "id"]]) {
          if (!tctmp)
            tctmp = DBQ[i, "id"]
          else {
            tc1[++j] = tctmp
            tc2[j]   = DBQ[i, "id"]
            tctmp = DBQ[i, "id"]
          }
        }
      db_clear()
      for (i = 1; i <= j ; i++)
        sql = sql                                                       \
          "INSERT INTO tcm (tc1ID, relID, tc2ID, pubID, graph, notes, `show`)" \
          " VALUES (" tc1[i] ", 2, " tc2[i] ", 46, 1, 'congruent batch', 1); "  

      if (DEBUG)
        printdebug(sql)
      err = db_sql(DATABASE, sql)
    }
  }
  
  if (err)
    print "<p style=\"color:red;\">FAILED: " err "</p>"
  else print "<p style=\"color:green;\">Success</p>"
}


function navbar(  i, str) {
  str = "<div class=\"navbar\">"
  str = str "<a href=\"do\">Home</a>&#160;&#160;|&#160;&#160;"
  for (i = 1; i <= length(Torder); i++)
    if (Tlabel[Torder[i]] !~ /0/)
      str = str "<a href=\"do?table=" Torder[i] "&amp;action=show\">" \
        Tlabel[Torder[i]] "</a> (<a href=\"do?table=" Torder[i] \
        "&amp;action=add\">+</a>)&#160;&#160;|&#160;&#160;"
  gsub(/&#160;&#160;\|&#160;&#160;$/,"",str)

  # Non-generic
  str = str "&#160;&#160;|&#160;&#160;<a href=\"do?action=graph\">Graph</a>"

  str = str "</div>"
  print str
  # correct the label, in case there is a 'forced' show
  gsub(/0/,"",Tlabel[f["table"]])
}


# =========================== Database ============================

function db_query(db, query            , row, i, cmd, preFS ) {
  # version history: [awk-lib] -> [asriSMS] -> here

  gsub(/`/,"\\`", query)  # if writing directly in awk script, need: \\\`
  gsub(/\n/," ", query)
  gsub(/  */," ", query)
  cmd = "/bin/echo -e \"" query "\" | mysql --default-character-set=UTF8 -u " DBUSER[db] " -p" \
    DBPASSWORD[db] " -h " DBHOST[db] \
    " -B --column-names --default-character-set=utf8 " DBNAME[db] 
  row = -1
  preFS = FS
  FS = "\t"
  while ((cmd | getline ) > 0) {
    row++
    if (row == 0) {
      DBQc = NF
      for (i = 1; i <= NF; i++) DBQf[i] = $i
    }
    else {
      for (i = 1; i <= NF; i++) {
        gsub(/NULL/,"",$i)
        DBQ[row, DBQf[i]] = $i
      }
    }
  }
  close(cmd)
  # In the case of Empty Set
  if (row == -1) row = 0
  DBQr = row
  FS = preFS
}

function db_clear() {

  delete DBQ
  delete DBQf
  DBQr = 0
  DBQc = 0
}

function db_sql(db, query            , cmd, inRS, mysqlout ) {
  # version 2; history: [awk-lib] -> [asriSMS] -> here

  gsub(/\n/," ",query)
  gsub(/  */," ",query)
  inRS = RS
  RS = "\x04"
  cmd = "mysql --default-character-set=UTF8 -u " DBUSER[db]                              \
    " -p" DBPASSWORD[db] " -h " DBHOST[db] " " DBNAME[db] " 2>&1"
  # not using system(). This way allows v long SQL statements
  # system() returns mysql exit code. Here, we send stderr to stdout
  print query |& cmd
  close(cmd, "to")
  cmd |& getline mysqlout
  close(cmd,"from")
  RS = inRS
  return mysqlout

  # # check the db is accessible
  # e = db_sql("asrisms1", "SELECT '  OK' AS 'testing DB connection...';")
  # if (e)
  #   error("Database not accessible")
}


# =========================== Util ================================

function config(    t, t2, ta, fld, fa,     i, j, gocnt, locnt, tcnt) {
  # Config:
  #   table1 { table_atts { table, full_name, sort_field, foreign_show } /
  #   fields { field1 { fieldname, full_name, ci, grid_show , foreign_id? } ;
  #           field2 ; ... | table2 | ...
  # order of tables and fields is used in display

  gsub(/ /,"",Config)
  gsub(/_/," ",Config)

  # split into tables
  tcnt = 1
  split(Config, t, "|")
  for (i in t) {

    # split into table atts and fields
    split(t[i],t2,"/")

    # table atts
    split(t2[1] ,ta,",")
    Tlabel[ta[1]]   = ta[2]
    Tsort[ta[1]]    = ta[3]
    Torder[tcnt++]  = ta[1]
    Tforshow[ta[1]] = ta[4]
    Tselect[ta[1]]  = ta[5]
    Tfilter[ta[1]]   = ta[6]
    gsub(/%5F/,"_",Tforshow[ta[1]])
    gsub(/%2C/,",",Tforshow[ta[1]])
    gsub(/%5F/,"_",Tselect[ta[1]])
    gsub(/%2C/,",",Tselect[ta[1]])
    gsub(/%5F/,"_",Tfilter[ta[1]])
    gsub(/%2C/,",",Tfilter[ta[1]])
    # ensure all select statements include a WHERE
    if (Tselect[ta[1]] !~ /WHERE/)
      Tselect[ta[1]] = Tselect[ta[1]] " WHERE TRUE"
    
    # fields
    split(t2[2], fld, ";")
    # go through fields, not including `id`
    gocnt = locnt = 1
    for (j = 2; j <= length(fld); j++) {
      split(fld[j], fa, ",")
      Flabel[ ta[1]][fa[1]]  = fa[2]
      Ftype[  ta[1]][fa[1]]  = fa[3] # c (char) or i (int)
      if (fa[4])
        Fgorder[ ta[1]][gocnt++] = fa[1]
      Forder[ ta[1]][locnt++] = fa[1]
      Fforid[ ta[1]][fa[1]]  = fa[5] # 
    }
  }
}

function clean_quotes(   i) {
   # clean text input in case of attempt to insert as SQL
   for (i in f) {
     gsub(/'/,"\\'", f[i])
     gsub(/"/,"\\\"",f[i])
   }
}


function make_lookup(filteron,       i, j, sql) {
  # make lookups
  for (i = 1; i <= length(Forder[f["table"]]); i++)
    if (Fforid[f["table"]][Forder[f["table"]][i]]) {
      sql = "SELECT id, "                                   \
        Tforshow[Fforid[f["table"]][Forder[f["table"]][i]]] \
        " AS `_lookup` FROM `"                              \
        Fforid[f["table"]][Forder[f["table"]][i]] "`"

      # if the filter is on (for dropdowns)
      if (Tfilter[ Fforid[f["table"]][Forder[f["table"]][i]] ] && filteron)
        sql = sql " WHERE " Tfilter[Fforid[f["table"]][Forder[f["table"]][i]] ]
      sql = sql " ;"
      if (DEBUG)
        printdebug(sql)
      db_query(DATABASE, sql)
      for (j = 1; j <= DBQr; j++) {
        Lookup[Fforid[f["table"]][Forder[f["table"]][i]]][DBQ[j,"id"]] = \
          DBQ[j, "_lookup"]
      }
      db_clear()
    }

  # for (i in Lookup)
  #   for (j in Lookup[i])
  #     print i, j, Lookup[i][j]
}


function urldecode(text,   hex, i, hextab, decoded, len, c, c1, c2, code) {
# decode urlencoded string
# urldecode function from Heiner Steven
#   http://www.shelldorado.com/scripts/cmds/urldecode
# version 1
	
  split("0 1 2 3 4 5 6 7 8 9 a b c d e f", hex, " ")
  for (i=0; i<16; i++) hextab[hex[i+1]] = i
  
  decoded = ""
  i = 1
  len = length(text)
  
  while ( i <= len ) {
    c = substr (text, i, 1)
    if ( c == "%" ) {
      if ( i+2 <= len ) {
        c1 = tolower(substr(text, i+1, 1))
        c2 = tolower(substr(text, i+2, 1))
        if ( hextab [c1] != "" || hextab [c2] != "" ) {
          # print "Read: %" c1 c2;
          # Allow: 
          # 20 begins main chars, but dissallow 7F (wrong in orig code!)
          #   tab, newline, formfeed, carriage return
          if ( ( (c1 >= 2) && ((c1 c2) != "7f") )   \
               || (c1 == 0 && c2 ~ "[9acd]") )
            {
              code = 0 + hextab [c1] * 16 + hextab [c2] + 0
              # print "Code: " code
              c = sprintf ("%c", code)
            } else {
            # for dissallowed chars
            c = " "
          }
          i = i + 2
        }
      }
    } else if ( c == "+" ) 	# special handling: "+" means " "
      c = " "
    decoded = decoded c
    ++i
  }
  
  # change linebreaks to \n
  gsub(/\r\n/, "\n", decoded);
  # remove last linebreak
  sub(/[\n\r]*$/,"",decoded);
  return decoded
}

# =========================== Non-generic ================================

function graph(  dir) {

  header("TCM graph");
  navbar()
  
  print "<h1>TCM graph</h1>"

  # for now... only one fig at a time
  # "mktemp -d" | getline dir
  # close("mktemp -d")
  
  elab[1] = "[style=dotted,dir=none," # intersects
  elab[2] = "[dir=none,"              # congruent
  elab[3] = "[style=dashed,dir=none," # overlaps
  elab[4] = "[style=dashed,dir=back," # includes
  elab[5] = "[style=dashed," # is included in
  elab[6] = "[color=red,dir=none,"    # disjunct
  
  db_query(DATABASE, "SELECT tcm.id AS ID, TC1.id AS TC1ID, TC1.code AS TC1, tcm.relID AS R, " \
           "TC2.id AS TC2ID, TC2.code AS TC2 FROM tcm LEFT JOIN tc AS TC1 "\
           "ON tcm.tc1ID = TC1.id LEFT JOIN rel AS R ON tcm.relID = R.id "\
           "LEFT JOIN tc AS TC2 ON tcm.tc2ID = TC2.id WHERE tcm.`graph` = 1 "\
           "AND tcm.`show` = 1;")

  if (DBQr > 100) {
    print "<p>Sorry, cannot display a graph of more than 100 taxonomic"\
      " concepts.<br/>Suggest un-showing some of the completed concept chains;"\
      "<br/>the graph choices will not be lost.</p>"
    footer()
    exit 1
  }

  floras = "PAF|FNA|Cody|Welsh|Hult[eé]n"
  split(floras,flora,"|")
  
  gv = "digraph structure { \n"                     \
    "  rankdir=\"TB\"; \n"                          \
    "  node [fontname=\"Helvetica\",shape=box]; \n"                 \
    "  edge [fontname=\"Courier\", len=1.5, arrowhead=normal]; \n" \
    "  newrank=true; \n\n"

  for (i = 1; i <= DBQr; i++) {
    if (!node[DBQ[i, "TC1ID"]]) {
      gv = gv "node" DBQ[i, "TC1ID"] " [label=\"" DBQ[i, "TC1"] "\",URL=\"do?action=showone&amp;table=tc&amp;id=" DBQ[i, "TC1ID"] "\"]; \n"
      node[DBQ[i, "TC1ID"]]++
      for (j in flora)
        if (DBQ[i, "TC1"] ~ (" " flora[j]))     \
          florarank[j][DBQ[i, "TC1ID"]]++
    }
    if (!node[DBQ[i, "TC2ID"]]) {
      gv = gv "node" DBQ[i, "TC2ID"] " [label=\"" DBQ[i, "TC2"] "\",URL=\"do?action=showone&amp;table=tc&amp;id=" DBQ[i, "TC2ID"] "\"]; \n"
      node[DBQ[i, "TC2ID"]]++
      for (j in flora)
        if (DBQ[i, "TC2"] ~ (" " flora[j]))                 \
          florarank[j][DBQ[i, "TC2ID"]]++
    }
    gv = gv "node" DBQ[i, "TC1ID"] " -> node" DBQ[i, "TC2ID"] " "       \
      elab[DBQ[i, "R"]] "URL=\"do?action=showone&amp;table=tcm&amp;id=" DBQ[i, "ID"] "\"]; \n"
  }
  gv = gv "\n"

  for (i in flora) {
    rankstring = ""
    if (isarray(florarank[i])) {
      for (j in florarank[i])
        rankstring = rankstring "node" j " ;"
      gsub(/ ;$/,"",rankstring)
      gv = gv "  { rank=same; " rankstring "}\n"
    }
  }
  
  gv = gv "}"
  db_clear()

  # don't forget to make tmp/ chmod a+w
  print gv > "tmp/graph.dot"
  system("dot -Tcmapx -otmp/graph.map -Tjpg -otmp/graph.jpg tmp/graph.dot")
  RS="\x04"
  getline map < "tmp/graph.map"
  

  print "<div class=\"graph\">"
  print map
  print "<img src=\"tmp/graph.jpg\" usemap=\"#structure\"/>"
  print "<p>Nodes and edges are clickable. Symbols:</p>"
  print "<ul style=\"list-style-type:none\"><li>Solid black: <i>congruent with</i> (=)</li>"
  print "<li>Dashed black: <i>overlaps</i> (&gt;&lt;)</li>"
  print "<li>Dotted black: <i>intersects</i> (∩)</li>"
  print "<li>Dashed black with arrow: &lt;arrow from&gt; <i>is included in</i>"\
    " &lt;arrow to&gt; (&lt;)</li>"
  print "<li>Solid red: <i>is disjunct from</i> (|)</li></ul>"
  print "</div>"
  
  footer()
  
}


function defaultpage(   i)
{
  header("TCM for Flora AK");
  navbar()
  
  print "<h1>Taxonomic Concept Mapping for the Flora of Alaska</h1>"
  print "<div class=\"info\">"
  print "<h2>Usage</h2>"
  print "<p>Add a new publication, then a name in that publication, " \
    "then a taxonomic concept in that or another publication, then the "\
    "relationship between that taxon concept and another.</p>"
  print "<p>In the grid views, <b>V</b>: view single record, all fields,  "\
    "<b>E</b>: edit record, <b>D</b>: delete record. Table codes in brackets"\
    " (e.g., [tcm]) at end of row link to usages of that record in other "\
    "tables.</p>"
  print "<h2>Tools</h2>"
  print "<ul>"
  print "<li><a href=\"do?action=hideall\">Hide</a> all Pubs (except core "\
    "floras), Names, TCs, TCMs, to unclutter the lists when moving to a, "\
    "e.g., new genus. Hidden records can still be searched for, and then "\
    "edited to show themselves. TCMs to be graphed are not reset, but will "\
    "only be graphed when the TCMs are not hidden.</li>"
  print "<li><form action=\"do\"><input type=\"hidden\" name=\"action\" value=\"unhideall\"/><input type=\"submit\" value=\"Un-hide\"/> all Pubs, Names, "\
    "TCs, TCMs<br/>(optional: un-hide/add genera, one-by-one: <input type=\"text\" name=\"genus\" size=\"30\"/>)</form></li>"
  print "</ul></div>"
  
  footer()
}

function hide(method,   sql, err) {

  header("Hide and Show");
  navbar()
  
  print "<h1>Hide and Show</h1>"

  if (method == "hideall")
    sql = "UPDATE `name` SET `show` = 0; " \
      "UPDATE `tc` SET `show` = 0; "       \
      "UPDATE `tcm` SET `show` = 0; "      \
      "UPDATE `pub` SET `show` = 0; "      \
      "UPDATE `pub` SET `show` = 1 "                                    \
      "WHERE id = 19 OR id = 21 OR id = 22 OR id = 23 OR id = 24 OR id = 46 "\
      "OR id = 52 ; " 
  else if (method == "unhideall") {
    if (!f["genus"])
      sql = \
        "UPDATE `name` SET `show` = 1; "        \
        "UPDATE `tc` SET `show` = 1; "          \
        "UPDATE `tcm` SET `show` = 1; "         \
        "UPDATE `pub` SET `show` = 1; " 
    else {
      sql =                                                             \
        "UPDATE `name` SET `show` = 1 WHERE genus LIKE '%" f["genus"] "%'; " \
        "UPDATE `pub`,`name` SET `pub`.`show` = 1 WHERE `name`.`show` = 1 "\
        "AND `name`.pubID = pub.id; "                                   \
        "UPDATE `tc`, `name` SET `tc`.`show` = 1 WHERE `name`.`show` = 1 "\
        "AND `tc`.nameID = name.id; " \
        "UPDATE tcm, `tc` SET `tcm`.`show` = 1 WHERE `tc`.`show` = 1 "\
        "AND (`tcm`.tc1ID = tc.id OR `tcm`.tc2ID = tc.id); "
    }
  }

  print "<p>Action '" method "', results:</p>"
  err = db_sql(DATABASE, sql)
  if (err)
    print "<p style=\"color:red;\">FAILED: " err "</p>"
  else print "<p style=\"color:green;\">Success</p>"
  
  footer()
}

function printdebug(msg) {
  print "<div class=\"debugmsg\"><pre>" msg "</pre></div>"
}

